!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_OUTPUT_EXCMD	mixed	/number, pattern, mixed, or combineV2/
!_TAG_OUTPUT_FILESEP	slash	/slash or backslash/
!_TAG_OUTPUT_MODE	u-ctags	/u-ctags or e-ctags/
!_TAG_PATTERN_LENGTH_LIMIT	96	/0 for no limit/
!_TAG_PROC_CWD	/home/jonnavar/Desktop/repo/github_philosophers/philo/src/	//
!_TAG_PROGRAM_AUTHOR	Universal Ctags Team	//
!_TAG_PROGRAM_NAME	Universal Ctags	/Derived from Exuberant Ctags/
!_TAG_PROGRAM_URL	https://ctags.io/	/official site/
!_TAG_PROGRAM_VERSION	5.9.0	//
ft_add_value	ft_atoi.c	/^static	void	ft_add_value(const char *value, int *index, int *buffer)$/;"	f	typeref:typename:void	file:
ft_add_value	ft_ioverflow.c	/^static	int	ft_add_value(const char *value, int *index, int *buffer, int s)$/;"	f	typeref:typename:int	file:
ft_atoi	ft_atoi.c	/^int	ft_atoi(const char *value)$/;"	f	typeref:typename:int
ft_calloc	ft_calloc.c	/^void	*ft_calloc(size_t amount, size_t size)$/;"	f	typeref:typename:void *
ft_handle_num_sign	ft_ioverflow.c	/^static	void	ft_handle_num_sign(const char *value, int *index, int *sign)$/;"	f	typeref:typename:void	file:
ft_ioverflow	ft_ioverflow.c	/^int	ft_ioverflow(const char *value)$/;"	f	typeref:typename:int
ft_isdigit	ft_isdigit.c	/^int	ft_isdigit(const char character)$/;"	f	typeref:typename:int
ft_issign	ft_issign.c	/^int	ft_issign(const char character)$/;"	f	typeref:typename:int
ft_isspace	ft_isspace.c	/^int	ft_isspace(const char character)$/;"	f	typeref:typename:int
ft_out_of_bounds	ft_ioverflow.c	/^static	int	ft_out_of_bounds(int *buffer, int digit, int sign)$/;"	f	typeref:typename:int	file:
main	main.c	/^int	main(int argc, char **argv)$/;"	f	typeref:typename:int
ph_allocate_philo_memory	ph_allocate_philo_memory.c	/^int	ph_allocate_philo_memory(t_simulation *simulation)$/;"	f	typeref:typename:int
ph_allocate_thread_data	ph_allocate_thread_data.c	/^int	ph_allocate_thread_data(t_thread_data **data, t_simulation *sim)$/;"	f	typeref:typename:int
ph_assign_data	ph_allocate_thread_data.c	/^static	void	ph_assign_data(t_thread_data *data, t_simulation *simulation)$/;"	f	typeref:typename:void	file:
ph_compute_start_time	ph_run_threads.c	/^static	int	ph_compute_start_time(t_simulation *simulation)$/;"	f	typeref:typename:int	file:
ph_destroy_mutexes	ph_destroy_mutexes.c	/^void	ph_destroy_mutexes(t_simulation *simulation)$/;"	f	typeref:typename:void
ph_destroy_philo_mutexes	ph_destroy_mutexes.c	/^void	ph_destroy_philo_mutexes(t_simulation *simulation)$/;"	f	typeref:typename:void
ph_diff	ph_philo_starved.c	/^static	long long	ph_diff(struct timeval *end, struct timeval *start)$/;"	f	typeref:typename:long long	file:
ph_display_status	ph_display_status.c	/^void	ph_display_status(t_thread_data *data, const char *format)$/;"	f	typeref:typename:void
ph_eat	ph_eat.c	/^int	ph_eat(t_thread_data *data, pthread_mutex_t *l, pthread_mutex_t *r)$/;"	f	typeref:typename:int
ph_end_simulation	ph_end_simulation.c	/^void	ph_end_simulation(t_thread_data *data)$/;"	f	typeref:typename:void
ph_g_f_l	ph_get_forks.c	/^int	ph_g_f_l(t_thread_data *d, pthread_mutex_t *l, pthread_mutex_t *r, int err)$/;"	f	typeref:typename:int
ph_g_f_r	ph_get_forks.c	/^int	ph_g_f_r(t_thread_data *d, pthread_mutex_t *l, pthread_mutex_t *r, int err)$/;"	f	typeref:typename:int
ph_get_delta_time	ph_get_delta_time.c	/^long long	ph_get_delta_time(t_simulation *simulation)$/;"	f	typeref:typename:long long
ph_get_forks	ph_eat.c	/^int	ph_get_forks(t_thread_data *d, pthread_mutex_t *l, pthread_mutex_t *r)$/;"	f	typeref:typename:int
ph_handle_error	ph_run_threads.c	/^static	void	ph_handle_error(t_philosopher *philosophers, int i)$/;"	f	typeref:typename:void	file:
ph_handle_mu_err	ph_initialize_mutexes.c	/^static	int	ph_handle_mu_err(t_philosopher *philosophers, int i, int err)$/;"	f	typeref:typename:int	file:
ph_initialize_mutexes	ph_initialize_mutexes.c	/^int	ph_initialize_mutexes(t_simulation *simulation)$/;"	f	typeref:typename:int
ph_initialize_print_mutex	ph_initialize_mutexes.c	/^static	int	ph_initialize_print_mutex(t_simulation *simulation)$/;"	f	typeref:typename:int	file:
ph_is_number	ph_validate_args.c	/^static int	ph_is_number(char *arg)$/;"	f	typeref:typename:int	file:
ph_join_threads	ph_end_simulation.c	/^static	void	ph_join_threads(t_thread_data *data)$/;"	f	typeref:typename:void	file:
ph_kill_philosopher	ph_kill_philosopher.c	/^void	ph_kill_philosopher(t_simulation *simulation, size_t i)$/;"	f	typeref:typename:void
ph_lock_display	ph_display_status.c	/^static void	ph_lock_display(t_thread_data *data)$/;"	f	typeref:typename:void	file:
ph_not_finished	ph_not_finished.c	/^int	ph_not_finished(t_simulation *simulation, size_t i)$/;"	f	typeref:typename:int
ph_parse_arguments	ph_parse_arguments.c	/^void	ph_parse_arguments(int argc, char **argv, t_simulation *simulation)$/;"	f	typeref:typename:void
ph_philo_actions	ph_philo_actions.c	/^void	*ph_philo_actions(void *arg)$/;"	f	typeref:typename:void *
ph_philo_starved	ph_philo_starved.c	/^int	ph_philo_starved(t_simulation *sim, size_t i)$/;"	f	typeref:typename:int
ph_release_f	ph_release_f.c	/^void	ph_release_f(pthread_mutex_t *l, pthread_mutex_t *r)$/;"	f	typeref:typename:void
ph_run_threads	ph_run_threads.c	/^int	ph_run_threads(t_thread_data *data)$/;"	f	typeref:typename:int
ph_set_start_meal_time	ph_run_threads.c	/^static	void	ph_set_start_meal_time(t_simulation *simulation, size_t i)$/;"	f	typeref:typename:void	file:
ph_simulate	ph_start_simulation.c	/^int	ph_simulate(t_thread_data *data, t_simulation *sim, size_t i, int end)$/;"	f	typeref:typename:int
ph_simulation_ended	ph_eat.c	/^int	ph_simulation_ended(t_thread_data *d)$/;"	f	typeref:typename:int
ph_start_simulation	ph_start_simulation.c	/^void	ph_start_simulation(t_thread_data *data)$/;"	f	typeref:typename:void
ph_to_milliseconds	ph_to_milliseconds.c	/^long long	ph_to_milliseconds(long long s, long long microseconds)$/;"	f	typeref:typename:long long
ph_unlock_display	ph_display_status.c	/^static void	ph_unlock_display(t_thread_data *data)$/;"	f	typeref:typename:void	file:
ph_update_meal_time	ph_update_meal_time.c	/^void	ph_update_meal_time(t_philosopher *philosopher)$/;"	f	typeref:typename:void
ph_validate_args	ph_validate_args.c	/^int	ph_validate_args(int argc, char **argv)$/;"	f	typeref:typename:int
ph_validate_numbers	ph_validate_args.c	/^static int	ph_validate_numbers(int argc, char **argv)$/;"	f	typeref:typename:int	file:
ph_wait_for_my_fate	ph_eat.c	/^int	ph_wait_for_my_fate(t_thread_data *data)$/;"	f	typeref:typename:int
ph_wait_ms	ph_wait_ms.c	/^int	ph_wait_ms(int ms, t_thread_data *data)$/;"	f	typeref:typename:int
